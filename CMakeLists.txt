cmake_minimum_required(VERSION 3.14)
project(soundcoe VERSION 0.0.1 LANGUAGES CXX)

set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

message(STATUS "[soundcoe] Fetching OpenAL-Soft from source...")

include(FetchContent)
FetchContent_Declare(
    openal
    GIT_REPOSITORY https://github.com/kcat/openal-soft.git
    GIT_TAG 1.24.3
)

# Basic configuration options (for all platforms)
set(LIBTYPE "STATIC" CACHE STRING "Build static library" FORCE)
set(ALSOFT_UTILS OFF CACHE BOOL "" FORCE)
set(ALSOFT_EXAMPLES OFF CACHE BOOL "" FORCE)
set(ALSOFT_TESTS OFF CACHE BOOL "" FORCE)
set(ALSOFT_NO_CONFIG_UTIL ON CACHE BOOL "" FORCE)
set(ALSOFT_EMBED_HRTF_DATA ON CACHE BOOL "" FORCE)

# Platform-specific backend requirements
if(WIN32)
  # Windows - Make backends optional to support different Windows versions
  option(SOUNDCOE_ENABLE_WASAPI "Enable WASAPI backend (Vista+)" ON)
  option(SOUNDCOE_ENABLE_DSOUND "Enable DirectSound backend" ON)
  option(SOUNDCOE_ENABLE_WINMM "Enable WinMM backend" ON)
  
  if(SOUNDCOE_ENABLE_WASAPI)
    set(ALSOFT_REQUIRE_WASAPI ON CACHE BOOL "" FORCE)
  else()
    set(ALSOFT_BACKEND_WASAPI OFF CACHE BOOL "" FORCE)
  endif()
  
  if(SOUNDCOE_ENABLE_DSOUND)
    set(ALSOFT_REQUIRE_DSOUND ON CACHE BOOL "" FORCE)
  else()
    set(ALSOFT_BACKEND_DSOUND OFF CACHE BOOL "" FORCE)
  endif()
  
  if(SOUNDCOE_ENABLE_WINMM)
    set(ALSOFT_REQUIRE_WINMM ON CACHE BOOL "" FORCE)
  else()
    set(ALSOFT_BACKEND_WINMM OFF CACHE BOOL "" FORCE)
  endif()
  
  # Disable non-Windows backends to prevent build issues
  set(ALSOFT_BACKEND_PIPEWIRE OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_PULSEAUDIO OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_ALSA OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_OSS OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_JACK OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_COREAUDIO OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_OPENSL OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_OBOE OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_SNDIO OFF CACHE BOOL "" FORCE)
elseif(APPLE)
  if(IOS)
    # iOS
    set(ALSOFT_REQUIRE_COREAUDIO ON CACHE BOOL "" FORCE)
    set(ALSOFT_UTILS OFF CACHE BOOL "" FORCE)
    set(ALSOFT_EXAMPLES OFF CACHE BOOL "" FORCE)
    set(ALSOFT_INSTALL OFF CACHE BOOL "" FORCE)
    
    # Disable non-iOS backends to prevent build issues
    set(ALSOFT_BACKEND_WASAPI OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_DSOUND OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_WINMM OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_PIPEWIRE OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_PULSEAUDIO OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_ALSA OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_OSS OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_JACK OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_OPENSL OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_OBOE OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_SNDIO OFF CACHE BOOL "" FORCE)
  else()
    # macOS
    set(ALSOFT_REQUIRE_COREAUDIO ON CACHE BOOL "" FORCE)
    
    # Disable non-macOS backends to prevent build issues
    set(ALSOFT_BACKEND_WASAPI OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_DSOUND OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_WINMM OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_PIPEWIRE OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_PULSEAUDIO OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_ALSA OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_OSS OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_JACK OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_OPENSL OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_OBOE OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL "" FORCE)
    set(ALSOFT_BACKEND_SNDIO OFF CACHE BOOL "" FORCE)
  endif()
elseif(ANDROID)
  # Android
  set(ALSOFT_REQUIRE_OPENSL ON CACHE BOOL "" FORCE)
  
  # Disable non-Android backends to prevent build issues
  set(ALSOFT_BACKEND_WASAPI OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_DSOUND OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_WINMM OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_COREAUDIO OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_PIPEWIRE OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_PULSEAUDIO OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_ALSA OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_OSS OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_JACK OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_SNDIO OFF CACHE BOOL "" FORCE)
elseif(UNIX)
  # Linux - Make backends optional to support different distributions
  option(SOUNDCOE_ENABLE_ALSA "Enable ALSA backend" ON)
  option(SOUNDCOE_ENABLE_PULSEAUDIO "Enable PulseAudio backend" ON)
  option(SOUNDCOE_ENABLE_PIPEWIRE "Enable PipeWire backend" ON)
  option(SOUNDCOE_ENABLE_OSS "Enable OSS backend" OFF)
  
  if(SOUNDCOE_ENABLE_ALSA)
    set(ALSOFT_REQUIRE_ALSA ON CACHE BOOL "" FORCE)
  else()
    set(ALSOFT_BACKEND_ALSA OFF CACHE BOOL "" FORCE)
  endif()
  
  if(SOUNDCOE_ENABLE_PULSEAUDIO)
    set(ALSOFT_REQUIRE_PULSEAUDIO ON CACHE BOOL "" FORCE)
  else()
    set(ALSOFT_BACKEND_PULSEAUDIO OFF CACHE BOOL "" FORCE)
  endif()
  
  if(SOUNDCOE_ENABLE_PIPEWIRE)
    set(ALSOFT_REQUIRE_PIPEWIRE ON CACHE BOOL "" FORCE)
  else()
    set(ALSOFT_BACKEND_PIPEWIRE OFF CACHE BOOL "" FORCE)
  endif()
  
  if(SOUNDCOE_ENABLE_OSS)
    set(ALSOFT_REQUIRE_OSS ON CACHE BOOL "" FORCE)
  else()
    set(ALSOFT_BACKEND_OSS OFF CACHE BOOL "" FORCE)
  endif()
  
  # Disable non-Linux backends to prevent build issues
  set(ALSOFT_BACKEND_WASAPI OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_DSOUND OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_WINMM OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_COREAUDIO OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_OPENSL OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_OBOE OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_SOLARIS OFF CACHE BOOL "" FORCE)
  set(ALSOFT_BACKEND_SNDIO OFF CACHE BOOL "" FORCE)
endif()

include(cmake/utils.cmake)
FetchContent_MakeAvailable(openal)
ignore_external_warnings(OpenAL)

message(STATUS "[soundcoe] Fetching logcoe from source...")

FetchContent_Declare(
    logcoe
    GIT_REPOSITORY https://github.com/nircoe/logcoe.git
    GIT_TAG v0.1.0
)
FetchContent_MakeAvailable(logcoe)
ignore_external_warnings(logcoe)

add_subdirectory(include)
add_subdirectory(src)

option(SOUNDECOE_BUILD_TESTS "Build soundcoe tests" ON)
if(SOUNDECOE_BUILD_TESTS)
  message(STATUS "[soundcoe] Building soundcoe tests")
  add_subdirectory(tests)
endif()

install(TARGETS soundcoe soundcoe_headers
    EXPORT soundcoe-targets
    LIBRARY DESTINATION lib
    ARCHIVE DESTINATION lib
    RUNTIME DESTINATION bin
    INCLUDES DESTINATION include
)

install(EXPORT soundcoe-targets
    FILE soundcoe-targets.cmake
    DESTINATION lib/cmake/soundcoe
)